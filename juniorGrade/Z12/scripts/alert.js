// Циклы while и for
// Задачи
/*
Последнее значение цикла
Какое последнее значение выведет этот код? Почему?
*/

let i = 3;

while (i) {
  alert( i-- );
}

// = 1, каждое вхождение цикла уменьшает значение на 1. 

// 2
/*
Какие значения выведет цикл while?
Для каждого цикла запишите, какие значения он выведет. Потом сравните с ответом.

Оба цикла выводят alert с одинаковыми значениями или нет?
*/

//Префиксный вариант ++i:
let i = 0;
while (++i < 5) alert( i ); 
// От 1 до 4

//Постфиксный вариант i++
let i = 0;
while (i++ < 5) alert( i );
// От 1 до 5

// 3
/*
Какие значения выведет цикл for?
Для каждого цикла запишите, какие значения он выведет. Потом сравните с ответом.

Оба цикла выведут alert с одинаковыми значениями или нет?
*/

//Постфиксная форма:
for (let i = 0; i < 5; i++) alert( i );
// от 0 до 4

//Префиксная форма:
for (let i = 0; i < 5; ++i) alert( i );
// от 0 до 4

// 4
/*
Выведите чётные числа
При помощи цикла for выведите чётные числа от 2 до 10.
*/
for (let i = 2; i <= 10; i++) {
  if (i % 2 == 0) {
    alert( i );
  }
}

// 5
/*
Замените for на while
важность: 5
Перепишите код, заменив цикл for на while, без изменения поведения цикла.

for (let i = 0; i < 3; i++) {
  alert( `number ${i}!` );
}
*/

let i = 0;
while (i < 3) {
  alert( `number ${i}!` );
  i++;
}
// 6
/*
Повторять цикл, пока ввод неверен
Напишите цикл, который предлагает prompt ввести число, большее 100. Если посетитель ввёл другое число – попросить ввести ещё раз, и так далее.

Цикл должен спрашивать число пока либо посетитель не введёт число, большее 100, либо не нажмёт кнопку Отмена (ESC).

let num;

do {
  num = prompt("Введите число, большее 100?", 0);
} while (num <= 100 && num);
*/

// 7
/* Вывести простые числа
Натуральное число, большее 1, называется простым, если оно ни на что не делится, кроме себя и 1.

Другими словами, n > 1 – простое, если при его делении на любое число кроме 1 и n есть остаток.
*/
let n = 10;

nextPrime:
for (let i = 2; i <= n; i++) {
  for (let j = 2; j < i; j++) {
    if (i % j == 0) continue nextPrime; 
  }
  alert(i); 
}